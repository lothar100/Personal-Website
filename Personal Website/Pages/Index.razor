@inject ModuleService _Service
@inject NavigationManager _NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject SessionState _SessionState
@inject IJSRuntime _JSRuntime
@page "/"

@if (Modules == null || authState == null)
{
    <div class="container pb-3">Loading...</div>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="container pb-3">
                <h3 class="d-inline mb-0">@Text</h3>
                <div class="d-inline mx-1" @onclick="ToggleView"><span class="oi oi-eye align-middle @Style"></span></div>
            </div>
        </Authorized>
    </AuthorizeView>

    @foreach (var model in Modules.OrderBy(module => module.SortId))
    {
        <PageModule Model="model" IsAdminView="@_SessionState.IsAdminView" />
    }

    @if (_SessionState.IsAdminView == true)
    {
        <AddPageModule />
    }

    <ContactEmail />

}

@code {

    private AuthenticationState authState;
    private List<PageModuleModel> Modules;

    private string Text => _SessionState.IsAdminView ?? false ? "Admin View" : "Public View";
    private string Style => _SessionState.IsAdminView ?? false ? "text-success" : "text-muted";

    protected override async Task OnInitializedAsync()
    {
        authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        Modules = await _Service.GetAll();

        if (_SessionState.IsAdminView == null)
        {
            _SessionState.IsAdminView = authState.User.Identity.IsAuthenticated;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Modules != null && _Service.TargetId != null)
        {
            await _JSRuntime.InvokeVoidAsync("helper.scrollIntoView", _Service.TargetId);
            _Service.TargetId = null;
        }
    }

    private void ToggleView()
    {
        if (authState.User.Identity.IsAuthenticated)
        {
            _SessionState.IsAdminView = !_SessionState.IsAdminView;
            _NavigationManager.NavigateTo("/refresh");
        }
    }

}

