@inject ModuleService _Service
@inject NavigationManager _NavigationManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject SessionState _SessionState
@page "/"

@if (Modules == null || authState == null)
{
    <div class="container pb-3">Loading...</div>
}
else
{
    <AuthorizeView>
        <Authorized>
            @if (_SessionState.IsAdminView == true)
            {
                <div class="container pb-3">
                    <h3 class="d-inline mb-0">Admin View</h3>
                    <div class="d-inline mx-1" @onclick="ToggleView"><span class="oi oi-eye text-success align-middle"></span></div>
                </div>
            }
            else
            {
                <div class="container pb-3">
                    <h3 class="d-inline mb-0">Public View</h3>
                    <div class="d-inline mx-1" @onclick="ToggleView"><span class="oi oi-eye text-muted align-middle"></span></div>
                </div>
            }
        </Authorized>
    </AuthorizeView>

    @foreach (var model in Modules.OrderBy(module => module.SortId))
    {
        <PageModule Model="model" IsAdminView="@_SessionState.IsAdminView" />
    }

    @if (_SessionState.IsAdminView == true)
    {
        <AddPageModule />
    }

    <ContactEmail />

}

@code {

    private AuthenticationState authState;
    private List<PageModuleModel> Modules;

    protected override async Task OnInitializedAsync()
    {
        authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        Modules = await _Service.GetAll();
        if (_SessionState.IsAdminView == null)
        {
            _SessionState.IsAdminView = authState.User.Identity.IsAuthenticated;
        }
    }

    private void ToggleView()
    {
        if (authState.User.Identity.IsAuthenticated)
        {
            _SessionState.IsAdminView = !_SessionState.IsAdminView;
            _NavigationManager.NavigateTo("/refresh");
        }
    }

}

