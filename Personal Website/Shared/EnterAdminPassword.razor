
@inject HttpClient _Http
@inject NavigationManager _NavigationManager

    <EditForm Model="@Auth" OnValidSubmit="Submit">
        <DataAnnotationsValidator />

        <div><label for="authInput">@Helper.DisplayNameFor(typeof(AuthModel), AuthTarget)</label></div>

        <div>
            @if (Auth.PasswordVerified)
            {
                <InputText class="form-control form-control-sm" style="max-width: 190px;" type="text" id="authInput" @bind-Value="Auth.Code" @onkeydown="ClearMessages" />
            }
            else
            {
                <InputText class="form-control form-control-sm" style="max-width: 190px;" type="password" id="authInput" @bind-Value="Auth.Password" @onkeydown="ClearMessages" />
            }
            <AlertText Text=@ErrorMessage />
            <AlertText Class="warning" Text="@StatusMessage" />
        </div>

        <div class="py-1"><button class="btn btn-outline-dark btn-sm" type="submit">@ButtonText</button></div>

    </EditForm>

@code {

    private AuthModel Auth = new AuthModel();
    string ErrorMessage;
    string StatusMessage;
    string AuthTarget => Auth.PasswordVerified ? "Code" : "Password";
    string ButtonText => Auth.PasswordVerified ? "Login" : "Submit";

    private async Task Submit()
    {
        StatusMessage = "Verifying...";
        try
        {
            var checkURL = _NavigationManager.ToAbsoluteUri($"/api/Auth/Check{AuthTarget}");

            var result = await _Http.PostAsJsonAsync(checkURL, Auth);
            var response = await result.Content.ReadAsStringAsync();

            ClearMessages();

            if (result.IsSuccessStatusCode && Auth.PasswordVerified == false)
            {
                Auth.PasswordVerified = true;
            }
            else if (result.IsSuccessStatusCode && Auth.PasswordVerified == true)
            {
                _NavigationManager.NavigateTo($"/login?password={Auth.Password.Encrypt().UrlEncode()}&code={Auth.Code.Encrypt().UrlEncode()}", true);
            }
            else
            {
                ErrorMessage = response;
                Auth.Reset();
            }
        } catch (Exception ex)
        {
            StatusMessage = string.Empty;
            ErrorMessage = ex.Message;
            Auth.Reset();
        }
    }

    private void ClearMessages()
    {
        StatusMessage = string.Empty;
        ErrorMessage = string.Empty;
    }

}