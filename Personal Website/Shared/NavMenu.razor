@inject IJSRuntime _JSRuntime
@inject ModuleService _Service
@implements IDisposable

<div class="navbar-light custom-nav">

    <div class="animated-icon @NavOpen" @onclick="ToggleNavMenu">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
    </div>

    <div class="@NavCollapse @NavSlide custom-slideTray mt-3" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">

            <li class="nav-item px-3">
                <AnchorLink class="nav-link" href="#main">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </AnchorLink>
            </li>

            @if (Modules != null)
            {
                @foreach (var module in Modules)
                {
                    if ((string.IsNullOrWhiteSpace(module.LinkId) && string.IsNullOrWhiteSpace(module.LinkText)) == false)
                    {
                        var linkId = $"#{module.LinkId}";
                        var glyph = string.IsNullOrWhiteSpace(module.LinkGlyph) ? "oi-bolt" : module.LinkGlyph;

                        <li class="nav-item px-3">
                            <AnchorLink class="nav-link" href="@linkId">
                                <span class="oi @glyph" aria-hidden="true"></span> @module.LinkText
                            </AnchorLink>
                        </li>
                    }
                }
            }



            <li class="nav-item px-3">
                <NavLink class="nav-link" href="admin">
                    <span class="oi oi-browser" aria-hidden="true"></span> Admin
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="ToggleDarkMode">
                    <span class="oi oi-contrast" aria-hidden="true"></span>@NavTheme
                </NavLink>
            </li>

        </ul>
    </div>
</div>

@code {
    private List<PageModuleModel> Modules;

    protected override void OnInitialized()
    {
        ModuleService.OnUpdate += UpdateModules;
    }

    public void Dispose()
    {
        ModuleService.OnUpdate -= UpdateModules;
    }

    private async Task UpdateModules()
    {
        ModuleService.OnUpdate -= UpdateModules;
        Modules = await _Service.GetAll();
        ModuleService.OnUpdate += UpdateModules;
    }

    private bool isClosed = true;

    private string NavCollapse = "collapse";

    private string NavSlide => isClosed ? "slide-in" : "slide-out";

    private string NavOpen => isClosed ? null : "open";

    private string darkMode;

    private string NavTheme => (darkMode ?? "disbaled").Equals("disabled") ? " Dark Mode" : " Light Mode";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        darkMode = await _JSRuntime.InvokeAsync<string>("darkMode.status", null);
        NavCollapse = null; //collapsed until page loads, then sliding animation handles show/hide
    }

    private void ToggleNavMenu()
    {
        isClosed = !isClosed;
    }

    private async Task ToggleDarkMode()
    {
        await _JSRuntime.InvokeVoidAsync("darkMode.toggle");
    }
}
