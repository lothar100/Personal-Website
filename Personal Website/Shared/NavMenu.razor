@inject IJSRuntime _JSRuntime
@inject ModuleService _Service
@inject SessionState _SessionState
@implements IDisposable

<div class="navbar-light custom-nav">

    <div class="animated-icon @NavOpen" @onclick="ToggleNavMenu">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
    </div>

    <div id="slideTray" class="@NavCollapse @NavSlide custom-slideTray mt-3" style="@Style @Visible" @onclick="ToggleNavMenu">
        <ul class="nav flex-column">

            <li class="nav-item px-3">
                <AnchorLink class="nav-link" href="#main">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </AnchorLink>
            </li>

            @if (Modules != null)
            {
                @foreach (var module in Modules.OrderBy(module => module.SortId))
                {
                    if ((string.IsNullOrWhiteSpace(module.LinkId) && string.IsNullOrWhiteSpace(module.LinkText)) == false)
                    {
                        var linkId = $"#{module.LinkId}";
                        var glyph = string.IsNullOrWhiteSpace(module.LinkGlyph) ? "oi-terminal" : module.LinkGlyph;

                        <li class="nav-item px-3">
                            <AnchorLink class="nav-link" href="@linkId">
                                <span class="oi @glyph" aria-hidden="true"></span> @module.LinkText
                            </AnchorLink>
                        </li>
                    }
                }
            }

            @if (_SessionState.IsAdminView != true)
            {
                <li class="nav-item px-3">
                    <AnchorLink class="nav-link" href="#contactEmail">
                        <span class="oi oi-envelope-closed" aria-hidden="true"></span> Contact
                    </AnchorLink>
                </li>
            }

            <AuthorizeView>
                <Authorized>
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="admin">
                            <span class="oi oi-browser" aria-hidden="true"></span> Admin
                        </NavLink>
                    </li>
                </Authorized>
            </AuthorizeView>

            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="ToggleDarkMode">
                    <span class="oi oi-contrast" aria-hidden="true"></span>@NavTheme
                </NavLink>
            </li>

            <li class="nav-item px-3">
                <a class="btn btn-success btn-sm btn-download" href="downloads/ResumeLangevoort.docx" download="ResumeLangevoort.docx" target="_top">
                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Download Resume
                </a>
            </li>

        </ul>
    </div>
</div>

@code {
    private List<PageModuleModel> Modules;
    private string Style => $"right: -{Width}px;";
    private string Visible = "visibility: hidden;";
    private int Width = 1000;

    protected override void OnInitialized()
    {
        ModuleService.OnUpdate += UpdateModules;
    }

    public void Dispose()
    {
        ModuleService.OnUpdate -= UpdateModules;
    }

    private async Task UpdateModules()
    {
        await Task.Delay(300); //-- without the delay here, the host server runs width calulation or some event in the wrong order causing width to be zero.
        Modules = _Service.CachedModules;
        StateHasChanged();
    }

    private bool isClosed = true;

    private string NavCollapse = "collapse";

    private string NavSlide => isClosed ? "slide-in" : "slide-out";

    private string NavOpen => isClosed ? null : "open";

    private string darkMode;

    private string NavTheme => (darkMode ?? "disbaled").Equals("disabled") ? " Dark Mode" : " Light Mode";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        NavCollapse = null; //-- collapsed until page loads, then sliding animation handles show/hide
        darkMode = await _JSRuntime.InvokeAsync<string>("darkMode.status", null);
        if (Width == 1000 && Modules != null)
        {
            Width = await _JSRuntime.InvokeAsync<int>("helper.getWidth", "slideTray");
            StateHasChanged();
        }
    }

    private void ToggleNavMenu()
    {
        Visible = string.Empty; //-- keeps tray invisible until the width has been calculated properly
        isClosed = !isClosed;
    }

    private async Task ToggleDarkMode()
    {
        await _JSRuntime.InvokeVoidAsync("darkMode.toggle");
    }
}
