@inject ModuleService _Service
@inject NavigationManager _NavigationManager

@if (IsAdminView == false)
{
    @if (Model.HasContent())
    {
        <div class="container pb-3">
            <div class="row">


                @if (Model.ImageCount == 1 && Model.ImageType == (int)Enums.ImageTypes.Outside)
                {
                    <div class="@colType">
                        <img class="@Model.ImageCSS" src="./images/@Model.ImageName">
                    </div>
                }


                @if (Model.HasCardContent())
                {
                    <div class="col">
                        <div class="card" style="max-width: 90rem">

                            @if (Model.ImageCount == 1 && Model.ImageType == (int)Enums.ImageTypes.Inside)
                            {
                                <img class="card-img-top @Model.ImageCSS" src="./images/@Model.ImageName">
                            }

                            <div class="card-body">
                                @if (string.IsNullOrWhiteSpace(Model.Title) == false)
                                {
                                    <h3 class="card-title">@((MarkupString)Model.Title)</h3>
                                }

                                @if (string.IsNullOrWhiteSpace(Model.Summary) == false)
                                {
                                    <p class="card-text">@((MarkupString)Model.Summary)</p>
                                }
                            </div>
                        </div>
                    </div>
                }


            </div>
        
        
        </div>
    }
}
else
{
    <AuthorizeView>
        <Authorized Context="Auth">

            <div class="container pb-3">
                <div class="row">
                    @if (Model.ImageCount == 1 && Model.ImageType == (int)Enums.ImageTypes.Outside)
                    {
                        <div class="col-md-auto">
                            <img class="@Model.ImageCSS" src="./images/@Model.ImageName">
                        </div>
                    }
                    <div class="col">
                        <div class="card" style="max-width: 90rem">

                            @if (Model.ImageCount == 1 && Model.ImageType == (int)Enums.ImageTypes.Inside)
                            {
                                <img class="card-img-top @Model.ImageCSS" src="./images/@Model.ImageName">
                            }

                            <div class="card-body">
                                <EditForm Model="@Model" OnValidSubmit="Save">
                                    <small>title</small>
                                    <div><InputText type="text" class="card-title form-control form-control-lg" @bind-Value="@Model.Title"></InputText></div>
                                    <small>summary</small>
                                    <div><InputTextArea type="text" class="card-text form-control" rows="@Model.SummaryRows" style="resize:none; white-space:pre; overflow-wrap:normal;" @bind-Value="@Model.Summary" @oninput="BindSummary"></InputTextArea></div>
                                    <small>image count (0-1)</small>
                                    <div><InputNumber type="text" class="card-title form-control form-control-sm" @bind-Value="@Model.ImageCount"></InputNumber></div>
                                    <small>image type (1-2)</small>
                                    <div><InputNumber type="text" class="card-title form-control form-control-sm" @bind-Value="@Model.ImageType"></InputNumber></div>
                                    <small>image name</small>
                                    <div><InputText type="text" class="card-title form-control form-control-sm" @bind-Value="@Model.ImageName"></InputText></div>
                                    <small>image css</small>
                                    <div><InputText type="text" class="card-title form-control form-control-sm" @bind-Value="@Model.ImageCSS"></InputText></div>


                                    <div class="row">
                                        <div class="col">
                                            <div class="pt-2">
                                                <button type="submit" class="btn btn-outline-dark btn-sm">Save</button>
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="Delete">Delete</button>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="pt-2">
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="MoveUp">Move Up</button>
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="MoveDown">MoveDown</button>
                                            </div>
                                        </div>
                                    </div>

                                    
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </Authorized>
    </AuthorizeView>
}


@code {

    [Parameter]
    public PageModuleModel Model { get; set; }

    [Parameter]
    public bool? IsAdminView { get; set; }

    private string colType => Model.HasCardContent() ? "col-md-auto" : "col";

    private async void Save()
    {
        await _Service.AddOrUpdate(Model);
        _NavigationManager.NavigateTo("refresh");
    }

    private async void Delete()
    {
        await _Service.Delete(Model.Id);
        _NavigationManager.NavigateTo("refresh");
    }

    private void BindSummary(ChangeEventArgs e)
    {
        Model.Summary = e.Value.ToString();
    }

    private async void MoveUp()
    {
        var upperModel = await _Service.GetPrev(Model.SortId);

        if (upperModel == null) return;

        var currentId = Model.SortId;
        Model.SortId = upperModel.SortId;
        upperModel.SortId = currentId;

        await _Service.AddOrUpdate(Model);
        await _Service.AddOrUpdate(upperModel);

        _NavigationManager.NavigateTo("refresh");
    }

    private async void MoveDown()
    {
        var lowerModel = await _Service.GetNext(Model.SortId);

        if (lowerModel == null) return;

        var currentId = Model.SortId;
        Model.SortId = lowerModel.SortId;
        lowerModel.SortId = currentId;

        await _Service.AddOrUpdate(Model);
        await _Service.AddOrUpdate(lowerModel);

        _NavigationManager.NavigateTo("refresh");
    }
}
