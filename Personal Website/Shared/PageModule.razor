@inject ModuleService _Service
@inject NavigationManager _NavigationManager

@if (IsAdminView == false)
{
    @if (Model.IsEmpty() == false)
    {
        <div class="container pb-3">
            <div class="card" style="max-width: 90rem">
                <div class="card-body">
                    @if (string.IsNullOrWhiteSpace(Model.Title) == false)
                    {
                    <h3 class="card-title">@((MarkupString)Model.Title)</h3>
                    }

                    @if (string.IsNullOrWhiteSpace(Model.Summary) == false)
                    {
                <p class="card-text">@((MarkupString)Model.Summary)</p>
                    }
                </div>
            </div>
        </div>
    }
}
else
{
    <AuthorizeView>
        <Authorized Context="Auth">

            <div class="container pb-3">
                <div class="card" style="max-width: 90rem">
                    <div class="card-body">
                        <EditForm Model="@Model" OnValidSubmit="Save">
                            <div><InputText type="text" class="card-title form-control form-control-lg" @bind-Value="@Model.Title"></InputText></div>
                            <div><InputTextArea type="text" class="card-text form-control" rows="@Model.SummaryRows" style="resize:none; white-space:pre; overflow-wrap:normal;" @bind-Value="@Model.Summary"  @oninput="BindSummary"></InputTextArea></div>
                            <div class="pt-2">
                                <button type="submit" class="btn btn-outline-dark btn-sm">Save</button>
                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="Delete">Delete</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

        </Authorized>
    </AuthorizeView>
}


@code {

    [Parameter]
    public PageModuleModel Model { get; set; }

    [Parameter]
    public bool? IsAdminView { get; set; }

    private async void Save()
    {
        await _Service.AddOrUpdate(Model);
        _NavigationManager.NavigateTo("refresh");
    }

    private async void Delete()
    {
        await _Service.Delete(Model.Id);
        _NavigationManager.NavigateTo("refresh");
    }

    public void BindSummary(ChangeEventArgs e)
    {
        Model.Summary = e.Value.ToString();
    }
}
