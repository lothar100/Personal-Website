@inject ModuleService _Service
@inject NavigationManager _NavigationManager

@if (IsAdminView == false)
{
    @if (Model.HasContent())
    {
        <div class="container pb-3">
            <div class="row">

                <OutsideImageModule Model="@Model" />

                @if (Model.HasCardContent())
                {
                    <div class="col">
                        <div id="@Model.LinkId" class="card" style="max-width: 90rem">

                            <div class="card-body">

                                <TitleModule Model="@Model" />

                                <BadgesModule Model="@Model" />

                                <ImageModule Model="@Model" />

                                <VideoModule Model="@Model" />

                                <SummaryModule Model="@Model" />

                                <MoreSummaryModule Model="@Model" />

                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    }
}
else
{
    <AuthorizeView>
        <Authorized Context="Auth">

            <div class="container pb-3">
                <div class="row">
                    
                    <OutsideImageModule Model="@Model"/>

                    <div class="col">
                        <div id="@Model.LinkId" class="card" style="max-width: 90rem">

                            <ImageModule Model="@Model"/>

                            <div class="card-body">
                                <EditForm Model="@Model" OnValidSubmit="Save">

                                    <small>link id</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.LinkId"></InputText></div>
                                    <small>link text</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.LinkText"></InputText></div>
                                    <small>link glyph (ex/ oi-book)</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.LinkGlyph"></InputText></div>

                                    <small>title</small>
                                    <div><InputText type="text" class="card-title form-control form-control-lg maxWidth288" @bind-Value="@Model.Title"></InputText></div>
                                    <small>badges</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.Badges"></InputText></div>
                                    <small>summary</small>
                                    <div><InputTextArea type="text" class="card-text form-control custom-textarea" rows="@Model.Summary.RowCount()" @bind-Value="@Model.Summary" @oninput="BindSummary"></InputTextArea></div>
                                    <small>more id</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.MoreSummaryId"></InputText></div>
                                    <small>more summary</small>
                                    <div><InputTextArea type="text" class="card-text form-control custom-textarea" rows="@Model.MoreSummary.RowCount()" @bind-Value="@Model.MoreSummary" @oninput="BindMoreSummary"></InputTextArea></div>

                                    <small>image count (0-1)</small>
                                    <div><InputNumber type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.ImageCount"></InputNumber></div>
                                    <small>image type (1-2)</small>
                                    <div><InputNumber type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.ImageType"></InputNumber></div>
                                    <small>image name</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.ImageName"></InputText></div>
                                    <small>image css</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.ImageCSS"></InputText></div>

                                    <small>video src</small>
                                    <div><InputText type="text" class="card-text form-control form-control-sm maxWidth288" @bind-Value="@Model.VideoSrc"></InputText></div>

                                    <div class="row">
                                        <div class="col">
                                            <div class="pt-2">
                                                <button type="submit" class="btn btn-outline-dark btn-sm">Save</button>
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="Delete">Delete</button>
                                            </div>
                                        </div>
                                        <div class="col">
                                            <div class="pt-2">
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="MoveUp">Move Up</button>
                                                <button type="button" class="btn btn-outline-dark btn-sm" @onclick="MoveDown">Move Down</button>
                                            </div>
                                        </div>
                                    </div>

                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </Authorized>
    </AuthorizeView>
}


@code {

    [Parameter]
    public PageModuleModel Model { get; set; }

    [Parameter]
    public bool? IsAdminView { get; set; }

    private string colType => Model.HasCardContent() ? "col-md-auto" : "col";

    private async void Save()
    {
        var test = await _Service.AddOrUpdate(Model);
        _NavigationManager.NavigateTo("refresh");
    }

    private async void Delete()
    {
        await _Service.Delete(Model.Id);
        _NavigationManager.NavigateTo("refresh");
    }

    private void BindSummary(ChangeEventArgs e)
    {
        Model.Summary = e.Value.ToString();
    }

    private void BindMoreSummary(ChangeEventArgs e)
    {
        Model.MoreSummary = e.Value.ToString();
    }

    private async void MoveUp()
    {
        var upperModel = await _Service.GetPrev(Model.SortId);

        if (upperModel == null) return;

        var currentId = Model.SortId;
        Model.SortId = upperModel.SortId;
        upperModel.SortId = currentId;

        await _Service.AddOrUpdate(Model);
        await _Service.AddOrUpdate(upperModel);

        _NavigationManager.NavigateTo("refresh");
    }

    private async void MoveDown()
    {
        var lowerModel = await _Service.GetNext(Model.SortId);

        if (lowerModel == null) return;

        var currentId = Model.SortId;
        Model.SortId = lowerModel.SortId;
        lowerModel.SortId = currentId;

        await _Service.AddOrUpdate(Model);
        await _Service.AddOrUpdate(lowerModel);

        _NavigationManager.NavigateTo("refresh");
    }
}
